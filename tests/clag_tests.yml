---
# Tests Executed:
#   - Verify Peerlink IP
#   - Verify clag priority
#   - Verify clag role
#   - Verify clag system mac
#   - Verify anycast IP
#   - Verify backup IP
#   - Verify Peer IP

# Expected var file format:
#   clag:
#     leaf01:
#       priority: 100
#       role: "primary"
#       system_mac: "44:39:39:ff:40:94"
#       anycast: "10.10.10.1"
#       backup_ip: "10.1.1.2"
#       peer_ip: "169.254.1.2"

# Extract the Peerlink IP and Mask info
- name: Create Peerlink IP and Mask (when required)
  set_fact:
    # Note the Peerlink is assumed to have /30 Mask
    # If the mask is not /30, the assertion will fail
    # This filter will append "/30" to the end of the IP address pull from the box
    var_peerlink_mask: "{{[l3_interfaces.peerlink[ansible_hostname], '/30']|join('')}}"
  when: l3_interfaces.peerlink[ansible_hostname] is defined

- name: Validate the Peerlink IP is configured (when required)
  assert:
    # This is the datastructure returned by "net show interface"
    that: var_peerlink_mask in configured_interfaces["peerlink.4094"]["iface_obj"]["ip_address"]["allentries"]
    # Note, this assumes peerlink.4094
    # The subinterface owns the IP and we enforce the sub must be .4094
    msg: "Peerlink IP address configured is incorrect. Expected {{var_peerlink_mask}} on peerlink.4094"
  when: l3_interfaces.peerlink[ansible_hostname] is defined

- name: Get Clag Data
  command: clagctl -j
  register: clag_output
  when: clag[ansible_hostname] is defined
  changed_when: False

# Turn the returned clag data into parsable json
- name: Process Clag Data
  set_fact:
    configured_clag: "{{clag_output.stdout | from_json}}"
  when: clag[ansible_hostname] is defined

# Run through the clag settings we care about and validate them.
# Each setting pulled from the device must match our vars file.
- name: Validate Clag Settings
  assert:
    that:
      - clag[ansible_hostname].priority == configured_clag["status"]["ourPriority"]
      - clag[ansible_hostname].role == configured_clag["status"]["ourRole"]
      - clag[ansible_hostname].system_mac == configured_clag["status"]["sysMac"]
      - clag[ansible_hostname].anycast == configured_clag["status"]["vxlanAnycast"]
      - clag[ansible_hostname].backup_ip == configured_clag["status"]["backupIp"]
      - clag[ansible_hostname].peer_ip == configured_clag["status"]["peerIp"]
  when: clag[ansible_hostname] is defined

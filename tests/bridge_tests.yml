---
# Tests Executed:
#   - Verify vlans exist in the bridge

# Expected bridge vars format:
#   stp:
#     # VLAN list matches against 'bridge -j vlan show'
#     # Be sure to consider if the native VLAN (1) is carried
#     leaf01:
#       peerlink: [1, 13, 24]
#       bond01: [13]

# Call the bridge_vid_parser python script
# The json returned by the bridge commands is difficult
# to parse with Ansible.
# This will return a json of {hostname: [list_of_vlans]}
- name: Get Configured VLANs
  script: bridge_vid_parser.py
  register: vlan_output
  when: stp[ansible_hostname] is defined
  changed_when: False

# Convert the output to json
- name: Process Bridge Data
  set_fact:
    configured_vlans: "{{vlan_output.stdout | from_json}}"
  when: stp[ansible_hostname] is defined

# Validate that the list of VLANs on the interface
# Matches the list of expected vlans.

- name: Validate VLANs
  assert:
    # If you don't cast to string, the json structures get unhappy.
    that: stp[ansible_hostname].{{item|string}} == configured_vlans.{{item|string}}
    msg: "Configured VLAN list does not match on {{ansible_hostname}}. Configured VLANs: configured_vlans.{{item|string}}"
  # Loop over the interface names (which are the keys)
  with_items: "{{stp[ansible_hostname].keys() | default([])}}"
  when: stp[ansible_hostname] is defined
